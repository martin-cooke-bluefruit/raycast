#include <Arduino.h>

#include "DisplayWrapper.hpp"
#include "Vector2.hpp"
#include "Raycaster.hpp"
#include "Input.hpp"

#define ANALOG_PIN_1 15

#define MAP_WIDTH 24
#define MAP_HEIGHT 24

#define WALK_SPEED 3.0
#define TURN_SPEED 1.5

int worldMap[MAP_WIDTH][MAP_HEIGHT]=
{
  {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7},
  {4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7},
  {4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
  {4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
  {4,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7},
  {4,0,4,0,0,0,0,5,5,5,5,5,5,5,5,5,7,7,0,7,7,7,7,7},
  {4,0,5,0,0,0,0,5,0,5,0,5,0,5,0,5,7,0,0,0,7,7,7,1},
  {4,0,6,0,0,0,0,5,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,8},
  {4,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,1},
  {4,0,8,0,0,0,0,5,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,8},
  {4,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,7,0,0,0,7,7,7,1},
  {4,0,0,0,0,0,0,5,5,5,5,0,5,5,5,5,7,7,7,7,7,7,7,1},
  {6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6},
  {8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
  {6,6,6,6,6,6,0,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6},
  {4,4,4,4,4,4,0,4,4,4,6,0,6,2,2,2,2,2,2,2,3,3,3,3},
  {4,0,0,0,0,0,0,0,0,4,6,0,6,2,0,0,0,0,0,2,0,0,0,2},
  {4,0,0,0,0,0,0,0,0,0,0,0,6,2,0,0,5,0,0,2,0,0,0,2},
  {4,0,0,0,0,0,0,0,0,4,6,0,6,2,0,0,0,0,0,2,2,0,2,2},
  {4,0,6,0,6,0,0,0,0,4,6,0,0,0,0,0,5,0,0,0,0,0,0,2},
  {4,0,0,5,0,0,0,0,0,4,6,0,6,2,0,0,0,0,0,2,2,0,2,2},
  {4,0,6,0,6,0,0,0,0,4,6,0,6,2,0,0,5,0,0,2,0,0,0,2},
  {4,0,0,0,0,0,0,0,0,4,6,0,6,2,0,0,0,0,0,2,0,0,0,2},
  {4,4,4,4,4,4,4,4,4,4,1,1,1,2,2,2,2,2,2,3,3,3,3,3}
};

unsigned char textureData[1024] =
{
  196, 243, 243, 243, 243, 244, 243, 242, 243, 241, 244, 243, 243, 243, 241, 243, 243, 242, 243, 244, 242, 197, 197, 196, 197, 197, 243, 244, 242, 243, 243, 197,
  244, 197, 243, 243, 244, 242, 244, 242, 242, 244, 242, 243, 242, 241, 243, 243, 242, 244, 242, 242, 198, 197, 197, 242, 242, 242, 243, 244, 242, 242, 197, 163,
  242, 244, 198, 242, 242, 243, 197, 198, 198, 196, 243, 244, 243, 244, 243, 244, 243, 241, 197, 196, 197, 243, 243, 242, 243, 242, 243, 242, 197, 197, 163, 115,
  196, 243, 241, 163, 162, 163, 162, 162, 162, 163, 163, 161, 163, 161, 163, 163, 163, 163, 161, 164, 163, 163, 162, 163, 163, 162, 162, 164, 162, 163, 114, 115,
  198, 243, 245, 163, 163, 163, 163, 162, 164, 161, 162, 162, 163, 162, 162, 164, 198, 197, 163, 162, 163, 163, 162, 162, 162, 163, 163, 162, 164, 114, 114,  63,
  196, 243, 243, 163, 163, 196, 196, 198, 196, 197, 197, 197, 197, 198, 195, 196, 198, 197, 196, 197, 198, 197, 198, 196, 196, 197, 197, 163, 163, 115, 116,  63,
  198, 197, 244, 162, 163, 197,  64,  63,  63,  63,  63,  64,  63,  64,  65,  63,  63,  63,  63,  64,  63,  63,  64,  63,  64, 197, 197, 163, 162, 115, 114,  64,
  196, 198, 242, 164, 163, 197,  64, 115, 114, 115, 115, 115, 116, 115, 163, 114, 115, 162, 114, 114, 114, 115, 115, 115, 114, 198, 197, 115, 163, 116, 115,  63,
  197, 197, 242, 162, 198, 197,  63, 115, 115, 163, 115, 115, 114, 197, 196, 163, 163, 197, 162, 116, 114, 114, 162, 115, 115, 197, 164, 114, 162, 114,  63,  65,
  196, 197, 243, 162, 197, 197,  65, 113, 161, 163, 115, 115, 242, 197, 162, 163, 163, 162, 197, 162, 115, 115, 163, 162, 114, 198, 162, 163, 162, 115,  65,  64,
  197, 197, 243, 163, 161, 198,  62, 115, 115, 116, 115, 243, 196, 163, 163, 115, 114, 163, 162, 197, 163, 114, 115, 114, 115, 198, 196, 164, 162,  63,  63,  64,
  198, 198, 243, 162, 162, 197,  63, 115, 114, 115, 244, 243, 163, 116,  64,  64,  64,  64, 114, 163, 243, 163, 115, 115, 114, 197, 198, 164, 163,  63,  64,  63,
  197, 197, 198, 162, 163, 197,  63, 115, 115, 243, 196, 164, 114,  64, 164, 163, 163, 162,  64, 114, 163, 197, 163, 114, 115, 197, 195, 162, 162,  64,  63,  64,
  197, 196, 195, 165, 161, 197,  64, 115, 196, 197, 163, 113,  63, 162, 164, 198, 115, 163, 163,  63, 115, 162, 196, 163, 115, 243, 198, 163, 163,  63,  63,  63,
  196, 196, 244, 163, 162, 197,  62, 163, 198, 162, 114,  64, 162, 162, 198, 242, 115, 115, 162, 164, 115, 115, 163, 197, 164, 242, 197, 163, 162, 114,  64,  63,
  197, 197, 243, 162, 163, 196,  63, 115, 163, 114, 116, 163, 163, 197, 243,  63, 163, 115, 115, 162, 162, 115, 115, 163, 113, 243, 197, 163, 163, 114,  63,  65,
  197, 196, 196, 163, 163, 198,  64, 115, 163, 163, 198, 163, 163, 115, 114, 163, 198,  63,  64, 163, 162, 196, 162, 163, 116, 241, 197, 161, 163, 114,  63,  64,
  197, 198, 196, 163, 164, 196,  63,  64, 115, 164, 196, 198, 163, 162, 114, 115,  64,  64, 161, 163, 197, 198, 163,  63,  65, 198, 196, 163, 162, 114,  64,  64,
  197, 164, 197, 163, 163, 197,  63, 115,  64, 115, 165, 197, 197, 163, 163, 115,  65, 162, 164, 243, 197, 163,  62,  64, 115, 242, 197, 163, 163, 114,  63,  63,
  197, 163, 196, 162, 163, 197,  63, 115, 114,  65, 115, 162, 196, 198, 162, 163, 163, 162, 243, 197, 163,  63,  64, 114, 114, 243, 196, 163, 162, 115,  65,  64,
  162, 163, 242, 163, 163, 197,  63, 114, 116, 114,  64, 115, 164, 197, 243, 243, 242, 244, 196, 164,  63,  63, 115, 115, 114, 197, 198, 162, 163, 116,  63,  63,
  162, 163, 243, 163, 162, 197,  64, 115, 115, 115, 115,  64, 114, 164, 163, 196, 196, 162, 165,  64,  65, 114, 115, 114, 114, 198, 197, 163, 162, 114, 115,  63,
  162, 162, 196, 162, 163, 197,  63, 115, 163, 163, 114, 116,  64, 115, 163, 163, 163, 162,  63,  64, 113, 115, 196, 163, 115, 242, 197, 197, 162, 116, 114,  63,
  163, 163, 197, 162, 163, 197,  64, 115, 115, 162, 114, 115, 114,  64, 115, 163, 163,  64,  63, 115, 115, 115, 164, 116, 114, 244, 196, 196, 163, 115, 114, 115,
  164, 198, 197, 163, 163, 196,  64, 114, 115, 114, 115, 114, 115, 113,  64, 115, 115,  64, 115, 115, 115, 115, 115, 114, 115, 242, 196, 163, 162, 115,  64, 115,
  197, 196, 197, 162, 163, 197, 242, 244, 242, 243, 243, 244, 243, 243, 244, 243, 196, 198, 197, 243, 243, 243, 242, 242, 244, 242, 198, 162, 163, 114,  63,  63,
  163, 163, 196, 163, 162, 197, 198, 198, 198, 196, 198, 197, 197, 162, 197, 196, 197, 198, 197, 197, 197, 198, 197, 196, 163, 164, 197, 163, 163, 113,  63,  64,
  164, 162, 197, 162, 164, 162, 163, 163, 163, 163, 162, 163, 114, 116, 196, 199, 161, 163, 163, 165, 163, 163, 163, 163, 115, 115, 163, 163, 163, 114,  63,  63,
  162, 197, 163, 115, 162, 163, 163, 163, 163, 163, 163, 163, 163, 161, 164, 162, 162, 163, 163, 161, 162, 162, 163, 163, 163, 163, 162, 162, 162, 117, 115,  64,
  198, 162, 116,  63,  63,  63,  63,  64,  65,  63,  62,  63,  63,  63,  63,  65,  64,  64,  63,  64,  63,  64,  63,  63,  63,  63,  64,  64,  64, 114, 116,  64,
  162, 115,  63,  62,  64,  63,  63,  63, 114, 115,  64,  63,  64,  63,  63,  63,  62,  64,  63, 114,  65,  64,  64,  64,  63,  64,  63,  63,  64,  63, 115, 113,
  115,  64,  62,  64,  63,  64, 115, 115, 115, 115,  63,  64,  63,  63,  63,  64,  64, 114, 115, 115,  63,  63,  63,  64,  64,  63,  64,  64,  63,  64,  64, 114
};

DisplayWrapper *display;

Vector2 playerPosition;
Vector2 playerDirection;

Raycaster *raycaster;

static uint32_t time;

void UpdateGame(void);

void WalkForward(double distance);
void WalkBackward(double distance);
void TurnLeft(double radians);
void TurnRight(double radians);

void setup()
{
  display = new DisplayWrapper();

  Serial.begin(9600);
  unsigned int rngSeed = analogRead(ANALOG_PIN_1);
  randomSeed(rngSeed);

  raycaster = new Raycaster(MAP_WIDTH, MAP_HEIGHT, *worldMap);

  Input_InitPins();

  time = millis();

  playerPosition.x = 12;
  playerPosition.y = 12;

  playerDirection.x = 0;
  playerDirection.y = 1;
}

void loop() 
{
  UpdateGame();
  Input_Clear();
  display->Render(true); // dithering parameter
}

void UpdateGame()
{
  uint32_t currentTime = millis();
  double delatTime = (currentTime - time) / 1000.0;
  time = currentTime;

  if (Input_IsHeld(Button::Up))
    WalkForward(WALK_SPEED * delatTime);
  if (Input_IsHeld(Button::Down))
    WalkBackward(WALK_SPEED * delatTime);
  if (Input_IsHeld(Button::Left))
    TurnLeft(TURN_SPEED * delatTime);
  if (Input_IsHeld(Button::Right))
    TurnRight(TURN_SPEED * delatTime);

  display->Clear();

  raycaster->SetCameraPosition(playerPosition);
  raycaster->SetCameraDirection(playerDirection);
  raycaster->RenderToDisplay(display, textureData);
}

void WalkForward(double distance)
{
  Vector2 delta;
  delta.CloneFrom(playerDirection);
  delta.Scale(distance);
  playerPosition.Add(delta);
}

void WalkBackward(double distance)
{
  WalkForward(-distance);
}

void TurnLeft(double radians)
{
  playerDirection.Rotate(radians);
}

void TurnRight(double radians)
{
  playerDirection.Rotate(-radians);
}
